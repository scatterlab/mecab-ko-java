/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * 라이브러리를 사용할 때 Shared Library를 불러올 수 있도록 수정되었습니다.
 * ----------------------------------------------------------------------------- */
package org.chasen.mecab;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.lang.UnsatisfiedLinkError;

public class MeCab implements MeCabConstants {
    public static synchronized void initialize() throws UnsatisfiedLinkError {
        System.out.println("Loading MeCab library...");

        String nativeLibPath = "/org/chasen/mecab/native";
        if (System.getProperty("os.name").indexOf("Mac") >= 0) {
            nativeLibPath = nativeLibPath + "/macos";
        } else {
            nativeLibPath = nativeLibPath + "/linux";
        }

        String nativeLibName = System.mapLibraryName("MeCabWrapper");
        String nativeLibFilePath = nativeLibPath + "/" + nativeLibName;
        if (MeCab.class.getResource(nativeLibFilePath) == null) {
            throw new UnsatisfiedLinkError("Error finding native library: " + nativeLibFilePath);
        }

        // Temporary library folder
        String tempFolder = "/tmp";
        File extractedLibFile = new File(tempFolder, nativeLibName);
        extractLibrary(nativeLibFilePath, extractedLibFile);
        System.load(extractedLibFile.getAbsolutePath());
    }

    private static void extractLibrary(String resourcePath, File destination) {
        try {
            // Extract resource files
            InputStream reader = MeCab.class.getResourceAsStream(resourcePath);
            FileOutputStream writer = new FileOutputStream(destination);
            byte[] buffer = new byte[1024];
            int bytesRead = 0;
            while ((bytesRead = reader.read(buffer)) != -1) {
                writer.write(buffer, 0, bytesRead);
            }

            writer.close();
            reader.close();
        } catch (Exception e) {
            throw new UnsatisfiedLinkError("Error loading native library: " + resourcePath);
        }
    }
}
